basePath: /api/v1
definitions:
  services.CategoryResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  services.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    required:
    - name
    type: object
  services.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  services.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  services.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      profile_picture:
        type: string
      role:
        type: string
    required:
    - email
    - full_name
    - password
    type: object
  services.ResetPasswordRequest:
    properties:
      password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  services.TokenResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/services.UserResponse'
    type: object
  services.UpdateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    type: object
  services.UpdateUserRequest:
    properties:
      full_name:
        type: string
      password:
        type: string
      profile_picture:
        type: string
    type: object
  services.UserResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      profile_picture:
        type: string
      role:
        type: string
    type: object
  utils.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8003
info:
  contact:
    email: support@web3edu.com
    name: API Support
    url: http://www.web3edu.com/support
  description: API for Web3 Education Platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Web3 Education Platform API
  version: "1.0"
paths:
  /admin/categories:
    post:
      consumes:
      - application/json
      description: Create a new category (admin only)
      parameters:
      - description: Create Category Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - admin
      - categories
  /admin/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category (admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - admin
      - categories
    put:
      consumes:
      - application/json
      description: Update a category (admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Category Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - admin
      - categories
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiate the forgot password process
      parameters:
      - description: Forgot Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Login a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user by invalidating refresh token
      parameters:
      - description: Logout Request
        in: body
        name: request
        required: true
        schema:
          properties:
            refresh_token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Logout a user
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh Token Request
        in: body
        name: request
        required: true
        schema:
          properties:
            refresh_token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, and full name
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register a new user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using token
      parameters:
      - description: Reset Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Reset password
      tags:
      - auth
  /categories:
    get:
      consumes:
      - application/json
      description: Get a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/services.CategoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: List all categories
      tags:
      - categories
  /categories/{id}:
    get:
      consumes:
      - application/json
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get a category by ID
      tags:
      - categories
  /i18n/{language}:
    get:
      consumes:
      - application/json
      description: Get all translation keys for a specific language
      parameters:
      - description: Language code (e.g., en, vi)
        in: path
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Language not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get translations for a language
      tags:
      - i18n
  /users:
    get:
      consumes:
      - application/json
      description: List all users (admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  properties:
                    page:
                      type: integer
                    size:
                      type: integer
                    total:
                      type: integer
                    users:
                      items:
                        $ref: '#/definitions/services.UserResponse'
                      type: array
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by ID (admin can view any user, regular users can only
        view themselves)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user (admin can update any user, regular users can only
        update themselves)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: Update the profile of the currently authenticated user
      parameters:
      - description: Update User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/services.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - profile
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
